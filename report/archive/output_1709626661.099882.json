{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 6, "total_error": 3}, "tests": {"0": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x00000001026ba004 chromedriver + 4169732\n   1   chromedriver                        0x00000001026b1ff8 chromedriver + 4136952\n   2   chromedriver                        0x0000000102307500 chromedriver + 292096\n   3   chromedriver                        0x000000010234c7a0 chromedriver + 575392\n   4   chromedriver                        0x0000000102387818 chromedriver + 817176\n   5   chromedriver                        0x00000001023405e8 chromedriver + 525800\n   6   chromedriver                        0x00000001023414b8 chromedriver + 529592\n   7   chromedriver                        0x0000000102680334 chromedriver + 3932980\n   8   chromedriver                        0x0000000102684970 chromedriver + 3950960\n   9   chromedriver                        0x0000000102668774 chromedriver + 3835764\n   10  chromedriver                        0x0000000102685478 chromedriver + 3953784\n   11  chromedriver                        0x000000010265aab4 chromedriver + 3779252\n   12  chromedriver                        0x00000001026a1914 chromedriver + 4069652\n   13  chromedriver                        0x00000001026a1a90 chromedriver + 4070032\n   14  chromedriver                        0x00000001026b1c70 chromedriver + 4136048\n   15  libsystem_pthread.dylib             0x000000019ca87fa8 _pthread_start + 148\n   16  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\n", "test_name": "test_login", "rerun": "0"}, "1": {"status": "FAIL", "message": "   selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".bandCreate._link\"}\n     (Session info: chrome=119.0.6045.159)\n   Stacktrace:\n   0   chromedriver                        0x00000001026ba004 chromedriver + 4169732\n   1   chromedriver                        0x00000001026b1ff8 chromedriver + 4136952\n   2   chromedriver                        0x0000000102307500 chromedriver + 292096\n   3   chromedriver                        0x000000010234c7a0 chromedriver + 575392\n   4   chromedriver                        0x0000000102387818 chromedriver + 817176\n   5   chromedriver                        0x00000001023405e8 chromedriver + 525800\n   6   chromedriver                        0x00000001023414b8 chromedriver + 529592\n   7   chromedriver                        0x0000000102680334 chromedriver + 3932980\n   8   chromedriver                        0x0000000102684970 chromedriver + 3950960\n   9   chromedriver                        0x0000000102668774 chromedriver + 3835764\n   10  chromedriver                        0x0000000102685478 chromedriver + 3953784\n   11  chromedriver                        0x000000010265aab4 chromedriver + 3779252\n   12  chromedriver                        0x00000001026a1914 chromedriver + 4069652\n   13  chromedriver                        0x00000001026a1a90 chromedriver + 4070032\n   14  chromedriver                        0x00000001026b1c70 chromedriver + 4136048\n   15  libsystem_pthread.dylib             0x000000019ca87fa8 _pthread_start + 148\n   16  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\n", "test_name": "test_bandcreate", "rerun": "0"}, "2": {"status": "FAIL", "message": "   IndexError: list index out of range\n", "test_name": "test_albumcreate", "rerun": "0"}, "3": {"status": "FAIL", "message": "   selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".btnMore\"}\n     (Session info: chrome=119.0.6045.159)\n   Stacktrace:\n   0   chromedriver                        0x00000001026ba004 chromedriver + 4169732\n   1   chromedriver                        0x00000001026b1ff8 chromedriver + 4136952\n   2   chromedriver                        0x0000000102307500 chromedriver + 292096\n   3   chromedriver                        0x000000010234c7a0 chromedriver + 575392\n   4   chromedriver                        0x0000000102387818 chromedriver + 817176\n   5   chromedriver                        0x00000001023405e8 chromedriver + 525800\n   6   chromedriver                        0x00000001023414b8 chromedriver + 529592\n   7   chromedriver                        0x0000000102680334 chromedriver + 3932980\n   8   chromedriver                        0x0000000102684970 chromedriver + 3950960\n   9   chromedriver                        0x0000000102668774 chromedriver + 3835764\n   10  chromedriver                        0x0000000102685478 chromedriver + 3953784\n   11  chromedriver                        0x000000010265aab4 chromedriver + 3779252\n   12  chromedriver                        0x00000001026a1914 chromedriver + 4069652\n   13  chromedriver                        0x00000001026a1a90 chromedriver + 4070032\n   14  chromedriver                        0x00000001026b1c70 chromedriver + 4136048\n   15  libsystem_pthread.dylib             0x000000019ca87fa8 _pthread_start + 148\n   16  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\n", "test_name": "test_albumedit", "rerun": "0"}, "4": {"status": "FAIL", "message": "   selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".btnMore\"}\n     (Session info: chrome=119.0.6045.159)\n   Stacktrace:\n   0   chromedriver                        0x00000001026ba004 chromedriver + 4169732\n   1   chromedriver                        0x00000001026b1ff8 chromedriver + 4136952\n   2   chromedriver                        0x0000000102307500 chromedriver + 292096\n   3   chromedriver                        0x000000010234c7a0 chromedriver + 575392\n   4   chromedriver                        0x0000000102387818 chromedriver + 817176\n   5   chromedriver                        0x00000001023405e8 chromedriver + 525800\n   6   chromedriver                        0x00000001023414b8 chromedriver + 529592\n   7   chromedriver                        0x0000000102680334 chromedriver + 3932980\n   8   chromedriver                        0x0000000102684970 chromedriver + 3950960\n   9   chromedriver                        0x0000000102668774 chromedriver + 3835764\n   10  chromedriver                        0x0000000102685478 chromedriver + 3953784\n   11  chromedriver                        0x000000010265aab4 chromedriver + 3779252\n   12  chromedriver                        0x00000001026a1914 chromedriver + 4069652\n   13  chromedriver                        0x00000001026a1a90 chromedriver + 4070032\n   14  chromedriver                        0x00000001026b1c70 chromedriver + 4136048\n   15  libsystem_pthread.dylib             0x000000019ca87fa8 _pthread_start + 148\n   16  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\n", "test_name": "test_albumdelete", "rerun": "0"}, "5": {"status": "FAIL", "message": "   IndexError: list index out of range\n", "test_name": "test_photoupload", "rerun": "0"}, "6": {"status": "ERROR", "message": "@pytest.fixture(autouse=True)\n    def screen_capture():\n>       attach(data=driver.get_screenshot_as_png())\n\ntest_web.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:927: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:938: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1030acfa0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...00019ca87fa8 _pthread_start + 148\\\\n17  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001026ba004 chromedriver + 4169732\nE       1   chromedriver                        0x00000001026b1ff8 chromedriver + 4136952\nE       2   chromedriver                        0x0000000102307500 chromedriver + 292096\nE       3   chromedriver                        0x00000001022e02d8 chromedriver + 131800\nE       4   chromedriver                        0x0000000102373f68 chromedriver + 737128\nE       5   chromedriver                        0x0000000102386fac chromedriver + 815020\nE       6   chromedriver                        0x00000001023405e8 chromedriver + 525800\nE       7   chromedriver                        0x00000001023414b8 chromedriver + 529592\nE       8   chromedriver                        0x0000000102680334 chromedriver + 3932980\nE       9   chromedriver                        0x0000000102684970 chromedriver + 3950960\nE       10  chromedriver                        0x0000000102668774 chromedriver + 3835764\nE       11  chromedriver                        0x0000000102685478 chromedriver + 3953784\nE       12  chromedriver                        0x000000010265aab4 chromedriver + 3779252\nE       13  chromedriver                        0x00000001026a1914 chromedriver + 4069652\nE       14  chromedriver                        0x00000001026a1a90 chromedriver + 4070032\nE       15  chromedriver                        0x00000001026b1c70 chromedriver + 4136048\nE       16  libsystem_pthread.dylib             0x000000019ca87fa8 _pthread_start + 148\nE       17  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\n\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:245: NoSuchWindowException\n", "test_name": "test_uploadedit", "rerun": "0"}, "7": {"status": "ERROR", "message": "@pytest.fixture(autouse=True)\n    def screen_capture():\n>       attach(data=driver.get_screenshot_as_png())\n\ntest_web.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:927: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:938: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1030acfa0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...00019ca87fa8 _pthread_start + 148\\\\n17  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001026ba004 chromedriver + 4169732\nE       1   chromedriver                        0x00000001026b1ff8 chromedriver + 4136952\nE       2   chromedriver                        0x0000000102307500 chromedriver + 292096\nE       3   chromedriver                        0x00000001022e02d8 chromedriver + 131800\nE       4   chromedriver                        0x0000000102373f68 chromedriver + 737128\nE       5   chromedriver                        0x0000000102386fac chromedriver + 815020\nE       6   chromedriver                        0x00000001023405e8 chromedriver + 525800\nE       7   chromedriver                        0x00000001023414b8 chromedriver + 529592\nE       8   chromedriver                        0x0000000102680334 chromedriver + 3932980\nE       9   chromedriver                        0x0000000102684970 chromedriver + 3950960\nE       10  chromedriver                        0x0000000102668774 chromedriver + 3835764\nE       11  chromedriver                        0x0000000102685478 chromedriver + 3953784\nE       12  chromedriver                        0x000000010265aab4 chromedriver + 3779252\nE       13  chromedriver                        0x00000001026a1914 chromedriver + 4069652\nE       14  chromedriver                        0x00000001026a1a90 chromedriver + 4070032\nE       15  chromedriver                        0x00000001026b1c70 chromedriver + 4136048\nE       16  libsystem_pthread.dylib             0x000000019ca87fa8 _pthread_start + 148\nE       17  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\n\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:245: NoSuchWindowException\n", "test_name": "test_imagedelte", "rerun": "0"}, "8": {"status": "ERROR", "message": "@pytest.fixture(autouse=True)\n    def screen_capture():\n>       attach(data=driver.get_screenshot_as_png())\n\ntest_web.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:927: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:938: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1030acfa0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...00019ca87fa8 _pthread_start + 148\\\\n17  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001026ba004 chromedriver + 4169732\nE       1   chromedriver                        0x00000001026b1ff8 chromedriver + 4136952\nE       2   chromedriver                        0x0000000102307500 chromedriver + 292096\nE       3   chromedriver                        0x00000001022e02d8 chromedriver + 131800\nE       4   chromedriver                        0x0000000102373f68 chromedriver + 737128\nE       5   chromedriver                        0x0000000102386fac chromedriver + 815020\nE       6   chromedriver                        0x00000001023405e8 chromedriver + 525800\nE       7   chromedriver                        0x00000001023414b8 chromedriver + 529592\nE       8   chromedriver                        0x0000000102680334 chromedriver + 3932980\nE       9   chromedriver                        0x0000000102684970 chromedriver + 3950960\nE       10  chromedriver                        0x0000000102668774 chromedriver + 3835764\nE       11  chromedriver                        0x0000000102685478 chromedriver + 3953784\nE       12  chromedriver                        0x000000010265aab4 chromedriver + 3779252\nE       13  chromedriver                        0x00000001026a1914 chromedriver + 4069652\nE       14  chromedriver                        0x00000001026a1a90 chromedriver + 4070032\nE       15  chromedriver                        0x00000001026b1c70 chromedriver + 4136048\nE       16  libsystem_pthread.dylib             0x000000019ca87fa8 _pthread_start + 148\nE       17  libsystem_pthread.dylib             0x000000019ca82da0 thread_start + 8\n\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:245: NoSuchWindowException\n", "test_name": "test_albumrange", "rerun": "0"}}, "suite_name": "test_web.py"}}}, "date": "March 05, 2024", "start_time": 1709626507.942614, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "6", "skip": "0", "error": "3", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "9"}